{"ast":null,"code":"export class AdminConfig {\n  constructor(config = {}) {\n    this.config = config;\n    this.defaultConfig = {\n      2: ['ABOUT_ME', 'ADDRESS'],\n      3: ['BIRTHDATE']\n    };\n  }\n\n  // Get components for a specific page\n  getComponentsForPage(pageNumber) {\n    return this.config[pageNumber] || this.defaultConfig[pageNumber] || [];\n  }\n\n  // Get all available component types\n  getAvailableComponents() {\n    return ['ABOUT_ME', 'ADDRESS', 'BIRTHDATE'];\n  }\n\n  // Check if a component is enabled for a page\n  isComponentEnabledForPage(componentType, pageNumber) {\n    const components = this.getComponentsForPage(pageNumber);\n    return components.includes(componentType);\n  }\n\n  // Get total number of configured pages\n  getTotalPages() {\n    const configuredPages = Object.keys(this.config).map(Number);\n    const defaultPages = Object.keys(this.defaultConfig).map(Number);\n    const allPages = [...new Set([...configuredPages, ...defaultPages])];\n    return Math.max(...allPages);\n  }\n\n  // Validate configuration\n  isValid() {\n    try {\n      const availableComponents = this.getAvailableComponents();\n      for (const [page, components] of Object.entries(this.config)) {\n        if (!Array.isArray(components)) return false;\n        for (const component of components) {\n          if (!availableComponents.includes(component)) return false;\n        }\n      }\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n\n  // Update configuration\n  updateConfig(newConfig) {\n    this.config = {\n      ...this.config,\n      ...newConfig\n    };\n  }\n\n  // Reset to default configuration\n  resetToDefault() {\n    this.config = {\n      ...this.defaultConfig\n    };\n  }\n\n  // Get configuration in API format\n  toAPIFormat() {\n    return this.config;\n  }\n}","map":{"version":3,"names":["AdminConfig","constructor","config","defaultConfig","getComponentsForPage","pageNumber","getAvailableComponents","isComponentEnabledForPage","componentType","components","includes","getTotalPages","configuredPages","Object","keys","map","Number","defaultPages","allPages","Set","Math","max","isValid","availableComponents","page","entries","Array","isArray","component","error","updateConfig","newConfig","resetToDefault","toAPIFormat"],"sources":["C:/Users/udayk/.eclipse/zealthy-onboarding-frontend/src/models/AdminConfig.js"],"sourcesContent":["\r\nexport class AdminConfig {\r\n  constructor(config = {}) {\r\n    this.config = config;\r\n    this.defaultConfig = {\r\n      2: ['ABOUT_ME', 'ADDRESS'], \r\n      3: ['BIRTHDATE']\r\n    };\r\n  }\r\n\r\n  // Get components for a specific page\r\n  getComponentsForPage(pageNumber) {\r\n    return this.config[pageNumber] || this.defaultConfig[pageNumber] || [];\r\n  }\r\n\r\n  // Get all available component types\r\n  getAvailableComponents() {\r\n    return ['ABOUT_ME', 'ADDRESS', 'BIRTHDATE'];\r\n  }\r\n\r\n  // Check if a component is enabled for a page\r\n  isComponentEnabledForPage(componentType, pageNumber) {\r\n    const components = this.getComponentsForPage(pageNumber);\r\n    return components.includes(componentType);\r\n  }\r\n\r\n  // Get total number of configured pages\r\n  getTotalPages() {\r\n    const configuredPages = Object.keys(this.config).map(Number);\r\n    const defaultPages = Object.keys(this.defaultConfig).map(Number);\r\n    const allPages = [...new Set([...configuredPages, ...defaultPages])];\r\n    return Math.max(...allPages);\r\n  }\r\n\r\n  // Validate configuration\r\n  isValid() {\r\n    try {\r\n      const availableComponents = this.getAvailableComponents();\r\n      \r\n      for (const [page, components] of Object.entries(this.config)) {\r\n        if (!Array.isArray(components)) return false;\r\n        \r\n        for (const component of components) {\r\n          if (!availableComponents.includes(component)) return false;\r\n        }\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Update configuration\r\n  updateConfig(newConfig) {\r\n    this.config = { ...this.config, ...newConfig };\r\n  }\r\n\r\n  // Reset to default configuration\r\n  resetToDefault() {\r\n    this.config = { ...this.defaultConfig };\r\n  }\r\n\r\n  // Get configuration in API format\r\n  toAPIFormat() {\r\n    return this.config;\r\n  }\r\n}"],"mappings":"AACA,OAAO,MAAMA,WAAW,CAAC;EACvBC,WAAWA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACvB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,aAAa,GAAG;MACnB,CAAC,EAAE,CAAC,UAAU,EAAE,SAAS,CAAC;MAC1B,CAAC,EAAE,CAAC,WAAW;IACjB,CAAC;EACH;;EAEA;EACAC,oBAAoBA,CAACC,UAAU,EAAE;IAC/B,OAAO,IAAI,CAACH,MAAM,CAACG,UAAU,CAAC,IAAI,IAAI,CAACF,aAAa,CAACE,UAAU,CAAC,IAAI,EAAE;EACxE;;EAEA;EACAC,sBAAsBA,CAAA,EAAG;IACvB,OAAO,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC;EAC7C;;EAEA;EACAC,yBAAyBA,CAACC,aAAa,EAAEH,UAAU,EAAE;IACnD,MAAMI,UAAU,GAAG,IAAI,CAACL,oBAAoB,CAACC,UAAU,CAAC;IACxD,OAAOI,UAAU,CAACC,QAAQ,CAACF,aAAa,CAAC;EAC3C;;EAEA;EACAG,aAAaA,CAAA,EAAG;IACd,MAAMC,eAAe,GAAGC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACZ,MAAM,CAAC,CAACa,GAAG,CAACC,MAAM,CAAC;IAC5D,MAAMC,YAAY,GAAGJ,MAAM,CAACC,IAAI,CAAC,IAAI,CAACX,aAAa,CAAC,CAACY,GAAG,CAACC,MAAM,CAAC;IAChE,MAAME,QAAQ,GAAG,CAAC,GAAG,IAAIC,GAAG,CAAC,CAAC,GAAGP,eAAe,EAAE,GAAGK,YAAY,CAAC,CAAC,CAAC;IACpE,OAAOG,IAAI,CAACC,GAAG,CAAC,GAAGH,QAAQ,CAAC;EAC9B;;EAEA;EACAI,OAAOA,CAAA,EAAG;IACR,IAAI;MACF,MAAMC,mBAAmB,GAAG,IAAI,CAACjB,sBAAsB,CAAC,CAAC;MAEzD,KAAK,MAAM,CAACkB,IAAI,EAAEf,UAAU,CAAC,IAAII,MAAM,CAACY,OAAO,CAAC,IAAI,CAACvB,MAAM,CAAC,EAAE;QAC5D,IAAI,CAACwB,KAAK,CAACC,OAAO,CAAClB,UAAU,CAAC,EAAE,OAAO,KAAK;QAE5C,KAAK,MAAMmB,SAAS,IAAInB,UAAU,EAAE;UAClC,IAAI,CAACc,mBAAmB,CAACb,QAAQ,CAACkB,SAAS,CAAC,EAAE,OAAO,KAAK;QAC5D;MACF;MAEA,OAAO,IAAI;IACb,CAAC,CAAC,OAAOC,KAAK,EAAE;MACd,OAAO,KAAK;IACd;EACF;;EAEA;EACAC,YAAYA,CAACC,SAAS,EAAE;IACtB,IAAI,CAAC7B,MAAM,GAAG;MAAE,GAAG,IAAI,CAACA,MAAM;MAAE,GAAG6B;IAAU,CAAC;EAChD;;EAEA;EACAC,cAAcA,CAAA,EAAG;IACf,IAAI,CAAC9B,MAAM,GAAG;MAAE,GAAG,IAAI,CAACC;IAAc,CAAC;EACzC;;EAEA;EACA8B,WAAWA,CAAA,EAAG;IACZ,OAAO,IAAI,CAAC/B,MAAM;EACpB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}