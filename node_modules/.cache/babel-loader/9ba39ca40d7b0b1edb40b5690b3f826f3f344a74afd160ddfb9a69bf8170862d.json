{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8080/api';\n\n// Configure axios with better error handling\naxios.defaults.timeout = 10000;\naxios.interceptors.response.use(response => response, error => {\n  var _error$response;\n  console.error('API Error:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n  return Promise.reject(error);\n});\n\n// User registration (original endpoint - may not be used in new flow)\nexport const registerUser = async userData => {\n  try {\n    const response = await axios.post(`${API_BASE_URL}/users/register`, userData);\n    return response.data;\n  } catch (error) {\n    var _error$response2;\n    throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || 'Registration failed';\n  }\n};\n\n// Complete user registration (ISSUE 2 FIX)\nexport const registerCompleteUser = async userData => {\n  try {\n    console.log('API: Sending complete registration request:', userData);\n    const response = await axios.post(`${API_BASE_URL}/users/register-complete`, userData);\n    console.log('API: Complete registration successful:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response4;\n    console.error('API: Complete registration failed:', ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || error.message);\n    throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || 'Complete registration failed';\n  }\n};\n\n// Update user step\nexport const updateUserStep = async (userId, step, userData) => {\n  try {\n    const response = await axios.put(`${API_BASE_URL}/users/${userId}/step/${step}`, userData);\n    return response.data;\n  } catch (error) {\n    var _error$response5;\n    throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || 'Update failed';\n  }\n};\n\n// Check if email exists (ISSUE 1 FIX)\nexport const checkEmailExists = async email => {\n  try {\n    console.log('API: Checking email:', email);\n    const response = await axios.get(`${API_BASE_URL}/users/email/${encodeURIComponent(email)}`);\n    console.log('API: Email exists');\n    return true;\n  } catch (error) {\n    var _error$response6, _error$response7;\n    if (((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status) === 404) {\n      console.log('API: Email available');\n      return false;\n    }\n    console.error('API: Email check error:', error);\n    throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || 'Email check failed';\n  }\n};\n\n// Get all users for data table (ISSUE 4 FIX)\nexport const getAllUsers = async () => {\n  try {\n    console.log('API: Fetching all users...');\n\n    // Try the main endpoint first\n    try {\n      const response = await axios.get(`${API_BASE_URL}/users`);\n      console.log('API: Successfully fetched', response.data.length, 'users from /users');\n      return response.data;\n    } catch (error) {\n      console.log('API: /users endpoint failed, trying /data/users');\n      // Fallback to data endpoint\n      const response = await axios.get(`${API_BASE_URL}/data/users`);\n      console.log('API: Successfully fetched', response.data.length, 'users from /data/users');\n      return response.data;\n    }\n  } catch (error) {\n    var _error$response8, _error$response9;\n    console.error('API: Failed to fetch users:', ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || error.message);\n    throw ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : _error$response9.data) || 'Failed to load users';\n  }\n};\n\n// Get user by ID\nexport const getUserById = async userId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/users/${userId}`);\n    return response.data;\n  } catch (error) {\n    var _error$response0;\n    throw ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : _error$response0.data) || 'User not found';\n  }\n};\n\n// Admin configuration endpoints\nexport const getAdminConfig = async () => {\n  try {\n    console.log('API: Fetching admin config...');\n    const response = await axios.get(`${API_BASE_URL}/admin/config`);\n    console.log('API: Admin config fetched:', response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response1, _error$response10;\n    console.error('API: Failed to load admin config:', ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : _error$response1.data) || error.message);\n    throw ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : _error$response10.data) || 'Failed to load config';\n  }\n};\nexport const updateAdminConfig = async configData => {\n  try {\n    console.log('API: Updating admin config:', configData);\n    const response = await axios.put(`${API_BASE_URL}/admin/config`, configData);\n    console.log('API: Admin config updated successfully');\n    return response.data;\n  } catch (error) {\n    var _error$response11, _error$response12;\n    console.error('API: Failed to update admin config:', ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : _error$response11.data) || error.message);\n    throw ((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : _error$response12.data) || 'Config update failed';\n  }\n};\n\n// Test endpoints\nexport const testUserEndpoint = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/users/test`);\n    return response.data;\n  } catch (error) {\n    var _error$response13;\n    throw ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : _error$response13.data) || 'User endpoint test failed';\n  }\n};\nexport const testDataEndpoint = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/data/test`);\n    return response.data;\n  } catch (error) {\n    var _error$response14;\n    throw ((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : _error$response14.data) || 'Data endpoint test failed';\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","defaults","timeout","interceptors","response","use","error","_error$response","console","data","message","Promise","reject","registerUser","userData","post","_error$response2","registerCompleteUser","log","_error$response3","_error$response4","updateUserStep","userId","step","put","_error$response5","checkEmailExists","email","get","encodeURIComponent","_error$response6","_error$response7","status","getAllUsers","length","_error$response8","_error$response9","getUserById","_error$response0","getAdminConfig","_error$response1","_error$response10","updateAdminConfig","configData","_error$response11","_error$response12","testUserEndpoint","_error$response13","testDataEndpoint","_error$response14"],"sources":["C:/Users/udayk/.eclipse/zealthy-frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:8080/api';\r\n\r\n// Configure axios with better error handling\r\naxios.defaults.timeout = 10000;\r\naxios.interceptors.response.use(\r\n  response => response,\r\n  error => {\r\n    console.error('API Error:', error.response?.data || error.message);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// User registration (original endpoint - may not be used in new flow)\r\nexport const registerUser = async (userData) => {\r\n    try {\r\n        const response = await axios.post(`${API_BASE_URL}/users/register`, userData);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response?.data || 'Registration failed';\r\n    }\r\n};\r\n\r\n// Complete user registration (ISSUE 2 FIX)\r\nexport const registerCompleteUser = async (userData) => {\r\n    try {\r\n        console.log('API: Sending complete registration request:', userData);\r\n        const response = await axios.post(`${API_BASE_URL}/users/register-complete`, userData);\r\n        console.log('API: Complete registration successful:', response.data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('API: Complete registration failed:', error.response?.data || error.message);\r\n        throw error.response?.data || 'Complete registration failed';\r\n    }\r\n};\r\n\r\n// Update user step\r\nexport const updateUserStep = async (userId, step, userData) => {\r\n    try {\r\n        const response = await axios.put(`${API_BASE_URL}/users/${userId}/step/${step}`, userData);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response?.data || 'Update failed';\r\n    }\r\n};\r\n\r\n// Check if email exists (ISSUE 1 FIX)\r\nexport const checkEmailExists = async (email) => {\r\n    try {\r\n        console.log('API: Checking email:', email);\r\n        const response = await axios.get(`${API_BASE_URL}/users/email/${encodeURIComponent(email)}`);\r\n        console.log('API: Email exists');\r\n        return true;\r\n    } catch (error) {\r\n        if (error.response?.status === 404) {\r\n            console.log('API: Email available');\r\n            return false;\r\n        }\r\n        console.error('API: Email check error:', error);\r\n        throw error.response?.data || 'Email check failed';\r\n    }\r\n};\r\n\r\n// Get all users for data table (ISSUE 4 FIX)\r\nexport const getAllUsers = async () => {\r\n    try {\r\n        console.log('API: Fetching all users...');\r\n        \r\n        // Try the main endpoint first\r\n        try {\r\n            const response = await axios.get(`${API_BASE_URL}/users`);\r\n            console.log('API: Successfully fetched', response.data.length, 'users from /users');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.log('API: /users endpoint failed, trying /data/users');\r\n            // Fallback to data endpoint\r\n            const response = await axios.get(`${API_BASE_URL}/data/users`);\r\n            console.log('API: Successfully fetched', response.data.length, 'users from /data/users');\r\n            return response.data;\r\n        }\r\n    } catch (error) {\r\n        console.error('API: Failed to fetch users:', error.response?.data || error.message);\r\n        throw error.response?.data || 'Failed to load users';\r\n    }\r\n};\r\n\r\n// Get user by ID\r\nexport const getUserById = async (userId) => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE_URL}/users/${userId}`);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response?.data || 'User not found';\r\n    }\r\n};\r\n\r\n// Admin configuration endpoints\r\nexport const getAdminConfig = async () => {\r\n    try {\r\n        console.log('API: Fetching admin config...');\r\n        const response = await axios.get(`${API_BASE_URL}/admin/config`);\r\n        console.log('API: Admin config fetched:', response.data);\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('API: Failed to load admin config:', error.response?.data || error.message);\r\n        throw error.response?.data || 'Failed to load config';\r\n    }\r\n};\r\n\r\nexport const updateAdminConfig = async (configData) => {\r\n    try {\r\n        console.log('API: Updating admin config:', configData);\r\n        const response = await axios.put(`${API_BASE_URL}/admin/config`, configData);\r\n        console.log('API: Admin config updated successfully');\r\n        return response.data;\r\n    } catch (error) {\r\n        console.error('API: Failed to update admin config:', error.response?.data || error.message);\r\n        throw error.response?.data || 'Config update failed';\r\n    }\r\n};\r\n\r\n// Test endpoints\r\nexport const testUserEndpoint = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE_URL}/users/test`);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response?.data || 'User endpoint test failed';\r\n    }\r\n};\r\n\r\nexport const testDataEndpoint = async () => {\r\n    try {\r\n        const response = await axios.get(`${API_BASE_URL}/data/test`);\r\n        return response.data;\r\n    } catch (error) {\r\n        throw error.response?.data || 'Data endpoint test failed';\r\n    }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}