{"ast":null,"code":"export class User {\n  constructor(data = {}) {\n    this.email = data.email || '';\n    this.password = data.password || '';\n    this.aboutMe = data.aboutMe || '';\n    this.streetAddress = data.streetAddress || '';\n    this.city = data.city || '';\n    this.state = data.state || '';\n    this.zip = data.zip || '';\n    this.birthdate = data.birthdate || '';\n  }\n\n  // Form validation methods\n  validateEmail() {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!this.email) return {\n      isValid: false,\n      message: 'Email is required'\n    };\n    if (!emailRegex.test(this.email)) return {\n      isValid: false,\n      message: 'Please enter a valid email address'\n    };\n    return {\n      isValid: true\n    };\n  }\n  validatePassword() {\n    if (!this.password) return {\n      isValid: false,\n      message: 'Password is required'\n    };\n    if (this.password.length < 6) return {\n      isValid: false,\n      message: 'Password must be at least 6 characters'\n    };\n    return {\n      isValid: true\n    };\n  }\n  validateAboutMe() {\n    // Make About Me required\n    if (!this.aboutMe || this.aboutMe.trim() === '') {\n      return {\n        isValid: false,\n        message: 'Please tell us about yourself'\n      };\n    }\n    if (this.aboutMe.length < 10) {\n      return {\n        isValid: false,\n        message: 'Please write at least 10 characters about yourself'\n      };\n    }\n    if (this.aboutMe.length > 500) {\n      return {\n        isValid: false,\n        message: 'About me must be 500 characters or less'\n      };\n    }\n    return {\n      isValid: true\n    };\n  }\n  validateAddress() {\n    const errors = {};\n\n    // Make all address fields required\n    if (!this.streetAddress || this.streetAddress.trim() === '') {\n      errors.streetAddress = 'Street address is required';\n    } else if (this.streetAddress.length < 5) {\n      errors.streetAddress = 'Street address must be at least 5 characters';\n    }\n    if (!this.city || this.city.trim() === '') {\n      errors.city = 'City is required';\n    } else if (this.city.length < 2) {\n      errors.city = 'City must be at least 2 characters';\n    }\n    if (!this.state || this.state.trim() === '') {\n      errors.state = 'State is required';\n    } else if (this.state.length !== 2) {\n      errors.state = 'State must be 2 characters (e.g., CA)';\n    }\n    if (!this.zip || this.zip.trim() === '') {\n      errors.zip = 'ZIP code is required';\n    } else if (!/^\\d{5}(-\\d{4})?$/.test(this.zip)) {\n      errors.zip = 'ZIP code must be in format 12345 or 12345-6789';\n    }\n    return {\n      isValid: Object.keys(errors).length === 0,\n      errors\n    };\n  }\n  validateBirthdate() {\n    // Make birthdate required\n    if (!this.birthdate || this.birthdate.trim() === '') {\n      return {\n        isValid: false,\n        message: 'Birthdate is required'\n      };\n    }\n    const birthDate = new Date(this.birthdate);\n    const today = new Date();\n    const age = today.getFullYear() - birthDate.getFullYear();\n    if (age < 13) return {\n      isValid: false,\n      message: 'You must be at least 13 years old'\n    };\n    if (age > 120) return {\n      isValid: false,\n      message: 'Please enter a valid birthdate'\n    };\n    return {\n      isValid: true\n    };\n  }\n\n  // Validate specific step with required fields\n  validateStep(step) {\n    switch (step) {\n      case 1:\n        const emailValidation = this.validateEmail();\n        const passwordValidation = this.validatePassword();\n        return {\n          isValid: emailValidation.isValid && passwordValidation.isValid,\n          errors: {\n            email: emailValidation.isValid ? null : emailValidation.message,\n            password: passwordValidation.isValid ? null : passwordValidation.message\n          }\n        };\n      case 2:\n        const aboutMeValidation = this.validateAboutMe();\n        const addressValidation = this.validateAddress();\n        return {\n          isValid: aboutMeValidation.isValid && addressValidation.isValid,\n          errors: {\n            aboutMe: aboutMeValidation.isValid ? null : aboutMeValidation.message,\n            ...addressValidation.errors\n          }\n        };\n      case 3:\n        const birthdateValidation = this.validateBirthdate();\n        return {\n          isValid: birthdateValidation.isValid,\n          errors: {\n            birthdate: birthdateValidation.isValid ? null : birthdateValidation.message\n          }\n        };\n      default:\n        return {\n          isValid: true,\n          errors: {}\n        };\n    }\n  }\n\n  // Check if step has all required data\n  hasRequiredDataForStep(step) {\n    switch (step) {\n      case 1:\n        return this.email && this.password && this.password.length >= 6;\n      case 2:\n        return this.aboutMe && this.aboutMe.trim() !== '' && this.streetAddress && this.streetAddress.trim() !== '' && this.city && this.city.trim() !== '' && this.state && this.state.trim() !== '' && this.zip && this.zip.trim() !== '';\n      case 3:\n        return this.birthdate && this.birthdate.trim() !== '';\n      default:\n        return false;\n    }\n  }\n\n  // Get user data for API submission\n  toAPIFormat() {\n    return {\n      email: this.email,\n      password: this.password,\n      aboutMe: this.aboutMe || null,\n      streetAddress: this.streetAddress || null,\n      city: this.city || null,\n      state: this.state || null,\n      zip: this.zip || null,\n      birthdate: this.birthdate || null\n    };\n  }\n\n  // Update field and return new instance\n  updateField(field, value) {\n    const newData = {\n      ...this,\n      [field]: value\n    };\n    return new User(newData);\n  }\n}","map":{"version":3,"names":["User","constructor","data","email","password","aboutMe","streetAddress","city","state","zip","birthdate","validateEmail","emailRegex","isValid","message","test","validatePassword","length","validateAboutMe","trim","validateAddress","errors","Object","keys","validateBirthdate","birthDate","Date","today","age","getFullYear","validateStep","step","emailValidation","passwordValidation","aboutMeValidation","addressValidation","birthdateValidation","hasRequiredDataForStep","toAPIFormat","updateField","field","value","newData"],"sources":["C:/Users/udayk/.eclipse/zealthy-onboarding-frontend/src/models/User.js"],"sourcesContent":["\r\nexport class User {\r\n  constructor(data = {}) {\r\n    this.email = data.email || '';\r\n    this.password = data.password || '';\r\n    this.aboutMe = data.aboutMe || '';\r\n    this.streetAddress = data.streetAddress || '';\r\n    this.city = data.city || '';\r\n    this.state = data.state || '';\r\n    this.zip = data.zip || '';\r\n    this.birthdate = data.birthdate || '';\r\n  }\r\n\r\n  // Form validation methods\r\n  validateEmail() {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    if (!this.email) return { isValid: false, message: 'Email is required' };\r\n    if (!emailRegex.test(this.email)) return { isValid: false, message: 'Please enter a valid email address' };\r\n    return { isValid: true };\r\n  }\r\n\r\n  validatePassword() {\r\n    if (!this.password) return { isValid: false, message: 'Password is required' };\r\n    if (this.password.length < 6) return { isValid: false, message: 'Password must be at least 6 characters' };\r\n    return { isValid: true };\r\n  }\r\n\r\n  validateAboutMe() {\r\n    // Make About Me required\r\n    if (!this.aboutMe || this.aboutMe.trim() === '') {\r\n      return { isValid: false, message: 'Please tell us about yourself' };\r\n    }\r\n    if (this.aboutMe.length < 10) {\r\n      return { isValid: false, message: 'Please write at least 10 characters about yourself' };\r\n    }\r\n    if (this.aboutMe.length > 500) {\r\n      return { isValid: false, message: 'About me must be 500 characters or less' };\r\n    }\r\n    return { isValid: true };\r\n  }\r\n\r\n  validateAddress() {\r\n    const errors = {};\r\n    \r\n    // Make all address fields required\r\n    if (!this.streetAddress || this.streetAddress.trim() === '') {\r\n      errors.streetAddress = 'Street address is required';\r\n    } else if (this.streetAddress.length < 5) {\r\n      errors.streetAddress = 'Street address must be at least 5 characters';\r\n    }\r\n    \r\n    if (!this.city || this.city.trim() === '') {\r\n      errors.city = 'City is required';\r\n    } else if (this.city.length < 2) {\r\n      errors.city = 'City must be at least 2 characters';\r\n    }\r\n    \r\n    if (!this.state || this.state.trim() === '') {\r\n      errors.state = 'State is required';\r\n    } else if (this.state.length !== 2) {\r\n      errors.state = 'State must be 2 characters (e.g., CA)';\r\n    }\r\n    \r\n    if (!this.zip || this.zip.trim() === '') {\r\n      errors.zip = 'ZIP code is required';\r\n    } else if (!/^\\d{5}(-\\d{4})?$/.test(this.zip)) {\r\n      errors.zip = 'ZIP code must be in format 12345 or 12345-6789';\r\n    }\r\n    \r\n    return {\r\n      isValid: Object.keys(errors).length === 0,\r\n      errors\r\n    };\r\n  }\r\n\r\n  validateBirthdate() {\r\n    // Make birthdate required\r\n    if (!this.birthdate || this.birthdate.trim() === '') {\r\n      return { isValid: false, message: 'Birthdate is required' };\r\n    }\r\n    \r\n    const birthDate = new Date(this.birthdate);\r\n    const today = new Date();\r\n    const age = today.getFullYear() - birthDate.getFullYear();\r\n    \r\n    if (age < 13) return { isValid: false, message: 'You must be at least 13 years old' };\r\n    if (age > 120) return { isValid: false, message: 'Please enter a valid birthdate' };\r\n    \r\n    return { isValid: true };\r\n  }\r\n\r\n  // Validate specific step with required fields\r\n  validateStep(step) {\r\n    switch (step) {\r\n      case 1:\r\n        const emailValidation = this.validateEmail();\r\n        const passwordValidation = this.validatePassword();\r\n        return {\r\n          isValid: emailValidation.isValid && passwordValidation.isValid,\r\n          errors: {\r\n            email: emailValidation.isValid ? null : emailValidation.message,\r\n            password: passwordValidation.isValid ? null : passwordValidation.message\r\n          }\r\n        };\r\n      \r\n      case 2:\r\n        const aboutMeValidation = this.validateAboutMe();\r\n        const addressValidation = this.validateAddress();\r\n        return {\r\n          isValid: aboutMeValidation.isValid && addressValidation.isValid,\r\n          errors: {\r\n            aboutMe: aboutMeValidation.isValid ? null : aboutMeValidation.message,\r\n            ...addressValidation.errors\r\n          }\r\n        };\r\n      \r\n      case 3:\r\n        const birthdateValidation = this.validateBirthdate();\r\n        return {\r\n          isValid: birthdateValidation.isValid,\r\n          errors: {\r\n            birthdate: birthdateValidation.isValid ? null : birthdateValidation.message\r\n          }\r\n        };\r\n      \r\n      default:\r\n        return { isValid: true, errors: {} };\r\n    }\r\n  }\r\n\r\n  // Check if step has all required data\r\n  hasRequiredDataForStep(step) {\r\n    switch (step) {\r\n      case 1:\r\n        return this.email && this.password && this.password.length >= 6;\r\n      case 2:\r\n        return this.aboutMe && this.aboutMe.trim() !== '' && \r\n               this.streetAddress && this.streetAddress.trim() !== '' &&\r\n               this.city && this.city.trim() !== '' &&\r\n               this.state && this.state.trim() !== '' &&\r\n               this.zip && this.zip.trim() !== '';\r\n      case 3:\r\n        return this.birthdate && this.birthdate.trim() !== '';\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  // Get user data for API submission\r\n  toAPIFormat() {\r\n    return {\r\n      email: this.email,\r\n      password: this.password,\r\n      aboutMe: this.aboutMe || null,\r\n      streetAddress: this.streetAddress || null,\r\n      city: this.city || null,\r\n      state: this.state || null,\r\n      zip: this.zip || null,\r\n      birthdate: this.birthdate || null\r\n    };\r\n  }\r\n\r\n  // Update field and return new instance\r\n  updateField(field, value) {\r\n    const newData = { ...this, [field]: value };\r\n    return new User(newData);\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}